{
  "version": "1.0.0",
  "summary": {
    "title": "Celestial Bodies Database",
    "description": "> Welcome! Are you ready to build a database of the universe?"
  },
  "config": {
    "setup": {
      "commands": [
        "sudo cp ~/project/.freeCodeCamp/pg_hba.conf /etc/postgresql/12/main/pg_hba.conf",
        "sudo chown -R postgres:postgres /var/lib/postgresql/12/main",
        "sudo service postgresql stop",
        "cd .freeCodeCamp && npm install",
        "sudo service postgresql start",
        "sudo -u postgres psql -c \"CREATE USER freecodecamp WITH CREATEDB;\""
      ],
      "commits": [
        "8dba081e1502874bd24b3d6197481d5f47d1e71b"
      ]
    },
    "testRunner": {
      "command": "npm run programmatic-test",
      "args": {
        "filter": "--grep",
        "tap": "--reporter=mocha-tap-reporter"
      },
      "directory": ".freeCodeCamp"
    },
    "repo": {
      "uri": "https://github.com/freeCodeCamp/learn-salon-appointment-scheduler",
      "branch": "v1.0.0"
    },
    "dependencies": [
      {
        "name": "node",
        "version": ">=10"
      }
    ]
  },
  "levels": [
    {
      "id": "1",
      "title": "Instructions",
      "summary": "Create your database by logging in to psql with the command `psql --username=...",
      "content": "Create your database by logging in to psql with the command `psql --username=freecodecamp --dbname=postgres`. You can query the database in your script with `psql --username=freecodecamp --dbname=salon -c \"SQL QUERY HERE\"`, add more flags if you need to. Be sure to get creative, and have fun!\n\nNotes:\n- Don't forget to connect to your database to add tables after you create it :smile:\n- Tests check the script output so don't use the `clear` command\n- See `examples.txt` for example output of a passing script\n- The tests may add data to your database, feel free to delete it if you want",
      "steps": [
        {
          "id": "1.1",
          "content": "Complete the tasks below",
          "subtasks": [
            "You should create a database named `salon`",
            "You should connect to your database, then create tables named `customers`, `appointments`, and `services`",
            "Each table should have a primary key column that automatically increments",
            "Each primary key column should follow the naming convention, `table_name_id`. For example, the `customers` table should have a `customer_id` key. Note that there’s no `s` at the end of `customer`",
            "Your `appointments` table should have a `customer_id` foreign key that references the `customer_id` column from the `customers` table",
            "Your `appointments` table should have a `service_id` foreign key that references the `service_id` column from the `services` table",
            "Your `customers` table should have `phone` that must be unique",
            "Your `customers` and `services` tables should have a `name` column",
            "Your `appointments` table should have a `time` column",
            "You should have at least three rows in your `services` table for the different services you offer",
            "You should create a script file named `salon.sh` in the `project` folder",
            "Your script file should have a “shebang” that uses bash when the file is executed (use `#! /bin/bash`)",
            "Your script file should have executable permissions",
            "You should not use the `clear` command in your script",
            "You should display a numbered list of the services you offer before the first prompt for input, each with the format `#) <service>`. For example, `1) cut`, where `1` is the `service_id`",
            "If you pick a service that doesn't exist, you should be shown the same list of services again",
            "Your script should prompt users to enter a `service_id`, phone number, a name if they aren’t already a customer, and a time. You should use `read` to read these inputs into variables named `SERVICE_ID_SELECTED`, `CUSTOMER_PHONE`, `CUSTOMER_NAME`, `and SERVICE_TIME`",
            "If a phone number entered doesn’t exist, you should get the customers name and enter it and the phone number into the `customers` table",
            "You can create a row in the `appointments` table by running your script and entering `1`, `555-555-5555`, `Fabio`, `10:30` at each request for input if that phone number isn’t in the `customers` table. The row should have the `customer_id` for that customer, and the `service_id` for the service entered",
            "You can create another row in the `appointments` table by running your script and entering `2`, `555-555-5555`, `11am` at each request for input if that phone number is already in the `customers` table. The row should have the `customer_id` for that customer, and the `service_id` for the service entered",
            "After an appointment is successfully added, you should output the message `I have put you down for a <service> at <time>, <name>.` For example, if the user chooses `cut` as the service, `10:30` is entered for the time, and their name is `Fabio` in the database the output would be `I have put your down for a cut at 10:30, Fabio.`"
          ],
          "setup": {
            "commits": [
              "2ee5256ef8e78a973a262cef9004ca1718c78d2b"
            ]
          }
        }
      ]
    }
  ]
}